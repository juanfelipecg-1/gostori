// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (account_id, amount, type, transaction_at) VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	AccountID     int32
	Amount        float64
	Type          string
	TransactionAt pgtype.Date
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.TransactionAt,
	)
	return err
}

const createTransactions = `-- name: CreateTransactions :exec
INSERT INTO transactions (account_id, amount, type, transaction_at) VALUES (
    unnest($1::int[]),
    unnest($2::float8[]),
    unnest($3::varchar[]),
    unnest($4::date[])
)
`

type CreateTransactionsParams struct {
	Column1 []int32
	Column2 []float64
	Column3 []string
	Column4 []pgtype.Date
}

func (q *Queries) CreateTransactions(ctx context.Context, arg CreateTransactionsParams) error {
	_, err := q.db.Exec(ctx, createTransactions,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const getTransactionsByAccountID = `-- name: GetTransactionsByAccountID :many
SELECT id, account_id, amount, type, transaction_at FROM transactions WHERE account_id = $1
`

func (q *Queries) GetTransactionsByAccountID(ctx context.Context, accountID int32) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Type,
			&i.TransactionAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
