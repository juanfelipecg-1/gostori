// Code generated by MockGen. DO NOT EDIT.
// Source: internal/file/filereader.go
//
// Generated by this command:
//
//	mockgen -source=internal/file/filereader.go -destination=internal/mocks/filereader_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/juanfcgarcia/gostori/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadTransactions mocks base method.
func (m *MockReader) ReadTransactions(ctx context.Context, filePath string) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransactions", ctx, filePath)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransactions indicates an expected call of ReadTransactions.
func (mr *MockReaderMockRecorder) ReadTransactions(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransactions", reflect.TypeOf((*MockReader)(nil).ReadTransactions), ctx, filePath)
}
