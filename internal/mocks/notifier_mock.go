// Code generated by MockGen. DO NOT EDIT.
// Source: internal/notification/notifier.go
//
// Generated by this command:
//
//	mockgen -source=internal/notification/notifier.go -destination=internal/mocks/notifier_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	notification "github.com/juanfcgarcia/gostori/internal/notification"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// SendSummaryEmail mocks base method.
func (m *MockNotifier) SendSummaryEmail(params notification.SendSummaryEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSummaryEmail", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSummaryEmail indicates an expected call of SendSummaryEmail.
func (mr *MockNotifierMockRecorder) SendSummaryEmail(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSummaryEmail", reflect.TypeOf((*MockNotifier)(nil).SendSummaryEmail), params)
}
